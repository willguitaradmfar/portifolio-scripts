{
    "core-script-v2 puppeteer": {
        "scope": "javascript",
        "prefix": "puppeteer",
        "body": [
            "const puppeteer = utils.puppeteer",
            "",
            "    const browser = await puppeteer.newBrowser()",
            "    const page = await browser.newPage()",
            "",
            "    await page.goto('<URL>')",
            "    await page.waitForSelector('<selector>')",
            "",
            "    const result = await page.evaluate((selector) => {",
            "        return {",
            "            iframe: document.querySelector(selector).getAttribute('src')",
            "        };",
            "    }, selector)",
            "",
            "    await browser.close()"
        ],
        "description": "Script V2 puppeteer"
    },
    "core-script-v2 paginatorFind": {
        "scope": "javascript",
        "prefix": "paginatorFind",
        "body": [
            "const iterator = utils.paginator('<collection on core-view>').find()",
            "",
            "    for await (const item of iterator) {",
            "        utils.log(item.<field>)",
            "    }"
        ],
        "description": "Script V2 paginatorFind"
    },
    "core-script-v2 paginatorAggregator": {
        "scope": "javascript",
        "prefix": "paginatorAggregator",
        "body": [
            "const iterator = utils.paginator('<collection on core-view>').aggregate([{",
            "        $project: {",
            "            _id: 1,",
            "        }",
            "    }])",
            "",
            "    for await (const item of iterator) {",
            "        utils.log(item.<field>)",
            "    }"
        ],
        "description": "Script V2 paginatorAggregator"
    },
    "core-script-v2 model": {
        "scope": "javascript",
        "prefix": "model",
        "body": [
            "const Model = utils.coll('<collection on core-view>')"
        ],
        "description": "Script V2 model"
    },
    "core-script-v2 exists": {
        "scope": "javascript",
        "prefix": "exists",
        "body": [
            "const isExists = await utils.coll('<collection on core-view>').exists(<{}>)"
        ],
        "description": "Script V2 exists"
    },
    "core-script-v2 find": {
        "scope": "javascript",
        "prefix": "find",
        "body": [
            "const list = await utils.coll('<collection on core-view>').find(<{}>)"
        ],
        "description": "Script V2 find"
    },
    "core-script-v2 findOne": {
        "scope": "javascript",
        "prefix": "findOne",
        "body": [
            "const obj = await utils.coll('<collection on core-view>').findOne(<{}>)"
        ],
        "description": "Script V2 findOne"
    },
    "core-script-v2 findById": {
        "scope": "javascript",
        "prefix": "findById",
        "body": [
            "const obj = await utils.coll('<collection on core-view>').findById(<id>)"
        ],
        "description": "Script V2 findById"
    },
    "core-script-v2 aggregate": {
        "scope": "javascript",
        "prefix": "aggregate",
        "body": [
            "const viewOn = '<collection on core-view>'",
            "    const aggregate = []",
            "",
            "    const list = await utils.coll(viewOn).aggregate(aggregate)"
        ],
        "description": "Script V2 aggregate"
    },
    "core-script-v2 aggregateGroup": {
        "scope": "javascript",
        "prefix": "aggregateGroup",
        "body": [
            "aggregate.push({",
            "        $group: {",
            "            _id: {",
            "                \"user\": \"$user\",",
            "            },",
            "            total: {",
            "                $sum: 1",
            "            }",
            "        }",
            "    })"
        ],
        "description": "Script V2 aggregateGroup"
    },
    "core-script-v2 aggregateMatch": {
        "scope": "javascript",
        "prefix": "aggregateMatch",
        "body": [
            "aggregate.push({",
            "        $match: {",
            "            \"user\": utils.mongoose.Types.ObjectId(userId),",
            "            \"categories\": {",
            "                $ne: []",
            "            }",
            "        }",
            "    })"
        ],
        "description": "Script V2 aggregateMatch"
    },
    "core-script-v2 aggregateLookup": {
        "scope": "javascript",
        "prefix": "aggregateLookup",
        "body": [
            "aggregate.push({",
            "        $lookup: {",
            "            from: \"<model_name>\",",
            "            localField: \"<local_field>\",",
            "            foreignField: \"<foreign_field>\",",
            "            as: \"<as>\"",
            "        }",
            "    })",
            "    ",
            "    aggregate.push({",
            "        $unwind: {",
            "            path: \"<as>\",",
            "            preserveNullAndEmptyArrays: false",
            "        }",
            "    })"
        ],
        "description": "Script V2 aggregateLookup"
    },
    "core-script-v2 aggregateComplexLookup": {
        "scope": "javascript",
        "prefix": "aggregateComplexLookup",
        "body": [
            "aggregate.push({",
            "        $lookup: {",
            "            from: \"<model_name>\",",
            "            as: \"<as>\",",
            "            let: {",
            "                localField: '$_id',",
            "            },",
            "            pipeline: [{",
            "                $match: {",
            "                    $expr: {",
            "                        $eq: [\"$$localField\", \"<model_name_foreign_field>\"]",
            "                    }",
            "                }",
            "            }, {",
            "                $project: {",
            "                    name: 1",
            "                }",
            "            }]",
            "        }",
            "    })"
        ],
        "description": "Script V2 aggregateComplexLookup"
    },
    "core-script-v2 create": {
        "scope": "javascript",
        "prefix": "create",
        "body": [
            "const newData = await utils.coll('<collection on core-view>').create({",
            "        <{data}>",
            "    })"
        ],
        "description": "Script V2 create"
    },
    "core-script-v2 updateOne": {
        "scope": "javascript",
        "prefix": "updateOne",
        "body": [
            "await utils.coll('<collection on core-view>').updateOne(<{filter}>, {",
            "        $set: <{update}>",
            "    })"
        ],
        "description": "Script V2 updateOne"
    },
    "core-script-v2 updateMany": {
        "scope": "javascript",
        "prefix": "updateMany",
        "body": [
            "await utils.coll('<collection on core-view>').updateMany(<{filter}>, {",
            "        $set: <{update}>",
            "    })"
        ],
        "description": "Script V2 updateMany"
    },
    "core-script-v2 deleteMany": {
        "scope": "javascript",
        "prefix": "deleteMany",
        "body": [
            "await utils.coll('<collection on core-view>').deleteMany(<{filter}>)"
        ],
        "description": "Script V2 deleteMany"
    },
    "core-script-v2 deleteOne": {
        "scope": "javascript",
        "prefix": "deleteOne",
        "body": [
            "await utils.coll('<collection on core-view>').deleteOne(<{filter}>)"
        ],
        "description": "Script V2 deleteOne"
    },
    "core-script-v2 rule": {
        "scope": "javascript",
        "prefix": "rule",
        "body": [
            "const result = await rule.RULE_NAME(<params>)"
        ],
        "description": "Script V2 rule"
    },
    "core-script-v2 dayjs": {
        "scope": "javascript",
        "prefix": "dayjs",
        "body": [
            "const now = utils.dayjs()"
        ],
        "description": "Script V2 dayjs"
    },
    "core-script-v2 dateFormat": {
        "scope": "javascript",
        "prefix": "dateFormat",
        "body": [
            "const nowFormatted = utils.dayjs().format(\"YYYY-MM-DD HH:mm:ss\")"
        ],
        "description": "Script V2 dateFormat"
    },
    "core-script-v2 dateSubstractHour": {
        "scope": "javascript",
        "prefix": "dateSubstractHour",
        "body": [
            "const nowSubstractHour = utils.dayjs().add(-1, \"hour\")"
        ],
        "description": "Script V2 dateSubstractHour"
    },
    "core-script-v2 dateAddMinute": {
        "scope": "javascript",
        "prefix": "dateAddMinute",
        "body": [
            "const nowAddMinute = utils.dayjs().add(1, \"minute\")"
        ],
        "description": "Script V2 dateAddMinute"
    },
    "core-script-v2 getApi": {
        "scope": "javascript",
        "prefix": "getApi",
        "body": [
            "const apiResult = await utils.fetch('<url>', {",
            "        method: 'GET',",
            "        headers: {",
            "            'Content-Type': 'application/json'",
            "        },",
            "    }).then(res => res.json())"
        ],
        "description": "Script V2 getApi"
    },
    "core-script-v2 postApi": {
        "scope": "javascript",
        "prefix": "postApi",
        "body": [
            "const apiResult = await utils.fetch('<url>', {",
            "        method: 'POST',",
            "        headers: {",
            "            'Content-Type': 'application/json'",
            "        },",
            "    }).then(res => res.json())"
        ],
        "description": "Script V2 postApi"
    },
    "core-script-v2 putApi": {
        "scope": "javascript",
        "prefix": "putApi",
        "body": [
            "const apiResult = await utils.fetch('<url>', {",
            "        method: 'PUT',",
            "        headers: {",
            "            'Content-Type': 'application/json'",
            "        },",
            "    }).then(res => res.json())"
        ],
        "description": "Script V2 putApi"
    },
    "core-script-v2 protect": {
        "scope": "javascript",
        "prefix": "protect",
        "body": [
            "utils.protect(input, 'path.to.value', {",
            "        code: 'ERROR_UNDEFINED_VALUE',",
            "        message: 'Error message',",
            "        statusCode: 400",
            "    })"
        ],
        "description": "Script V2 protect"
    },
    "core-script-v2 jwt_sign": {
        "scope": "javascript",
        "prefix": "jwt_sign",
        "body": [
            "const token = utils.jwt.sign({",
            "        <payload>",
            "    }, '<secret>')"
        ],
        "description": "Script V2 jwt_sign"
    },
    "core-script-v2 jwt_verify": {
        "scope": "javascript",
        "prefix": "jwt_verify",
        "body": [
            "const payload = utils.jwt.verify(token, '<secret>')"
        ],
        "description": "Script V2 jwt_verify"
    },
    "core-script-v2 jwt_decode": {
        "scope": "javascript",
        "prefix": "jwt_decode",
        "body": [
            "const payload = utils.jwt.decode(token)"
        ],
        "description": "Script V2 jwt_decode"
    },
    "core-script-v2 path": {
        "scope": "javascript",
        "prefix": "path",
        "body": [
            "const value = utils.path(input, '<path>', '<default-value>')"
        ],
        "description": "Script V2 path"
    },
    "core-script-v2 isNullOrUnidefined": {
        "scope": "javascript",
        "prefix": "isNullOrUnidefined",
        "body": [
            "const isValid = utils.isNullOrUnidefined(<value>)"
        ],
        "description": "Script V2 isNullOrUnidefined"
    },
    "core-script-v2 param": {
        "scope": "javascript",
        "prefix": "param",
        "body": [
            "const param = await utils.param('<KEY>')"
        ],
        "description": "Script V2 param"
    },
    "core-script-v2 notify": {
        "scope": "javascript",
        "prefix": "notify",
        "body": [
            "await utils.notify('<event>', {<>})"
        ],
        "description": "Script V2 notify"
    },
    "core-script-v2 base64": {
        "scope": "javascript",
        "prefix": "base64",
        "body": [
            "const base64 = utils.base64(<text>)"
        ],
        "description": "Script V2 base64"
    },
    "core-script-v2 lang": {
        "scope": "javascript",
        "prefix": "lang",
        "body": [
            "const field = utils.lang(<field>, <lang>)"
        ],
        "description": "Script V2 lang"
    },
    "core-script-v2 slug": {
        "scope": "javascript",
        "prefix": "slug",
        "body": [
            "const slug = utils.slug(<text>)"
        ],
        "description": "Script V2 slug"
    },
    "core-script-v2 md5": {
        "scope": "javascript",
        "prefix": "md5",
        "body": [
            "const md5 = utils.md5(<text>)"
        ],
        "description": "Script V2 md5"
    },
    "core-script-v2 uuid": {
        "scope": "javascript",
        "prefix": "uuid",
        "body": [
            "const uuid = utils.uuid()"
        ],
        "description": "Script V2 uuid"
    },
    "core-script-v2 removeAccentuation": {
        "scope": "javascript",
        "prefix": "removeAccentuation",
        "body": [
            "const cleanText = utils.removeAccentuation(<text>)"
        ],
        "description": "Script V2 removeAccentuation"
    },
    "core-script-v2 maskingEmails": {
        "scope": "javascript",
        "prefix": "maskingEmails",
        "body": [
            "const emailMask = utils.maskingEmails(<email>)"
        ],
        "description": "Script V2 maskingEmails"
    },
    "core-script-v2 throw": {
        "scope": "javascript",
        "prefix": "throw",
        "body": [
            "utils.throw(",
            "        <code>, ",
            "        <message>, ",
            "        <statusCode>)"
        ],
        "description": "Script V2 throw"
    },
    "core-script-v2 invoke": {
        "scope": "javascript",
        "prefix": "invoke",
        "body": [
            "const result = await utils.invoke(<codeName>, {",
            "        foo: 'bar'",
            "    })"
        ],
        "description": "Script V2 invoke"
    },
    "core-script-v2 setCache": {
        "scope": "javascript",
        "prefix": "setCache",
        "body": [
            "await utils.setCache(<key>, {",
            "        foo: 'bar'",
            "    }, <seconds>)"
        ],
        "description": "Script V2 setCache"
    },
    "core-script-v2 getCache": {
        "scope": "javascript",
        "prefix": "getCache",
        "body": [
            "await utils.getCache(<key>)"
        ],
        "description": "Script V2 getCache"
    },
    "core-script-v2 existsCache": {
        "scope": "javascript",
        "prefix": "existsCache",
        "body": [
            "await utils.existsCache(<key>)"
        ],
        "description": "Script V2 existsCache"
    },
    "core-script-v2 deleteCache": {
        "scope": "javascript",
        "prefix": "deleteCache",
        "body": [
            "await utils.deleteCache(<key>)"
        ],
        "description": "Script V2 deleteCache"
    },
    "core-script-v2 listCacheKeys": {
        "scope": "javascript",
        "prefix": "listCacheKeys",
        "body": [
            "await utils.listCacheKeys('*')"
        ],
        "description": "Script V2 listCacheKeys"
    },
    "core-script-v2 log": {
        "scope": "javascript",
        "prefix": "log",
        "body": [
            "utils.log()"
        ],
        "description": "Script V2 log"
    },
    "core-script-v2 logExample": {
        "scope": "javascript",
        "prefix": "logExample",
        "body": [
            "utils.log('Hello World!', { foo: 'bar' })"
        ],
        "description": "Script V2 logExample"
    },
    "core-script-v2 populateComplex": {
        "scope": "javascript",
        "prefix": "populateComplex",
        "body": [
            "const aggregate = utils",
            "        .populate({",
            "            'field1(tabela1{campo_a1, campo_b1})': {},",
            "            'field2(tabela2{campo_a2, campo_b2})': {",
            "                'field2_sub(tabela2_sub{campo_a2_sub, campo_b2_sub})': {},",
            "                '[field2_sub_list(foreign->tabela2_sub_list{campo_a2_sub_list, campo_b2_sub_list})]': {}",
            "            }",
            "        })"
        ],
        "description": "Script V2 populateComplex"
    },
    "core-script-v2 populate": {
        "scope": "javascript",
        "prefix": "populate",
        "body": [
            "utils.populate('field2(tabela2{campo_a2, campo_b2}).[field2_sub_list(foreign->tabela2_sub_list{campo_a2_sub_list, campo_b2_sub_list})]')"
        ],
        "description": "Script V2 populate"
    },
    "core-script-v2 openai_images": {
        "scope": "javascript",
        "prefix": "openai_images",
        "body": [
            "const resultado = await utils",
            "        .openai",
            "        .images('Gere qualquer coisa')"
        ],
        "description": "Script V2 openai_images"
    },
    "core-script-v2 openai_completion": {
        "scope": "javascript",
        "prefix": "openai_completion",
        "body": [
            "const resultado = await utils",
            "        .openai",
            "        .completion('Gere qualquer coisa')"
        ],
        "description": "Script V2 openai_completion"
    },
    "core-script-v2 openai_models": {
        "scope": "javascript",
        "prefix": "openai_models",
        "body": [
            "const resultado = await utils",
            "        .openai",
            "        .models()"
        ],
        "description": "Script V2 openai_models"
    },
    "core-script-v2 openai_chat": {
        "scope": "javascript",
        "prefix": "openai_chat",
        "body": [
            "const resultado = await utils",
            "        .openai",
            "        .chat('Gere qualquer coisa')"
        ],
        "description": "Script V2 openai_chat"
    },
    "core-script-v2 es_createIndex": {
        "scope": "javascript",
        "prefix": "es_createIndex",
        "body": [
            "const resultado = await utils",
            "        .es",
            "        .createIndex('index_name')"
        ],
        "description": "Script V2 es_createIndex"
    },
    "core-script-v2 es_deleteIndex": {
        "scope": "javascript",
        "prefix": "es_deleteIndex",
        "body": [
            "const resultado = await utils",
            "        .es",
            "        .deleteIndex('index_name')"
        ],
        "description": "Script V2 es_deleteIndex"
    },
    "core-script-v2 es_indexDocuments": {
        "scope": "javascript",
        "prefix": "es_indexDocuments",
        "body": [
            "const resultado = await utils",
            "        .es",
            "        .indexDocuments('index_name', [{<document>}], {<options>})"
        ],
        "description": "Script V2 es_indexDocuments"
    },
    "core-script-v2 es_removeDocuments": {
        "scope": "javascript",
        "prefix": "es_removeDocuments",
        "body": [
            "const resultado = await utils",
            "        .es",
            "        .removeDocuments('index_name', [<id>], {<options>})"
        ],
        "description": "Script V2 es_removeDocuments"
    },
    "core-script-v2 es_updateDocuments": {
        "scope": "javascript",
        "prefix": "es_updateDocuments",
        "body": [
            "const resultado = await utils",
            "        .es",
            "        .updateDocuments('index_name', [{<document>}], {<options>})"
        ],
        "description": "Script V2 es_updateDocuments"
    },
    "core-script-v2 es_search": {
        "scope": "javascript",
        "prefix": "es_search",
        "body": [
            "const resultado = await utils",
            "        .es",
            "        .search('index_name', {<query>})"
        ],
        "description": "Script V2 es_search"
    },
    "core-script-v2 core_view_api_create": {
        "scope": "javascript",
        "prefix": "core_view_api_create",
        "body": [
            "const newData = await utils.api('<api on core-view>').create({",
            "        <{data}>",
            "    }, { <options> })"
        ],
        "description": "Script V2 core_view_api_create"
    },
    "core-script-v2 core_view_api_update": {
        "scope": "javascript",
        "prefix": "core_view_api_update",
        "body": [
            "const newData = await utils.api('<api on core-view>').update(<id>, {",
            "        <{data}>",
            "    }, { <options> })"
        ],
        "description": "Script V2 core_view_api_update"
    },
    "core-script-v2 core_view_api_delete": {
        "scope": "javascript",
        "prefix": "core_view_api_delete",
        "body": [
            "const newData = await utils.api('<api on core-view>').delete(<id>, { <options> })"
        ],
        "description": "Script V2 core_view_api_delete"
    },
    "core-script-v2 core_view_api_get": {
        "scope": "javascript",
        "prefix": "core_view_api_get",
        "body": [
            "const newData = await utils.api('<api on core-view>').get(<id>, { <options> })"
        ],
        "description": "Script V2 core_view_api_get"
    },
    "core-script-v2 core_view_api_list": {
        "scope": "javascript",
        "prefix": "core_view_api_list",
        "body": [
            "const newData = await utils.api('<api on core-view>').list(<query>, { <options> })"
        ],
        "description": "Script V2 core_view_api_list"
    }
}